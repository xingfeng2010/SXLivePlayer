apply plugin: 'com.android.application'
ext {
    boolean isWindow = isWindowsOS();
    if(isWindow){
        native_sdk_path = rootDir.getAbsolutePath().replace('\\','/') + "/app"
    }else{
        native_sdk_path = file(rootDir.getAbsolutePath() + "/app")
    }
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    defaultConfig {
        applicationId "com.xingfeng.sxliveplayer"
        minSdkVersion 22
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                cppFlags "-frtti -fexceptions"
                abiFilters 'armeabi-v7a'
            }
        }

        sourceSets {
            main {
                jniLibs.srcDirs = ['src/main/jniLibs']
            }
        }

        ndk {
            abiFilter("armeabi-v7a")
        }
    }
    buildTypes {

        debug{

            debuggable true
            jniDebuggable true

            externalNativeBuild {
                cmake {
                    arguments '-DANDROID_PLATFORM=android-19', '-DANDROID_TOOLCHAIN=clang',
                            '-DANDROID_ARM_NEON=TRUE', '-DANDROID_STL=c++_static',
                            "-DPATH_TO_MEDIACORE:STRING=${native_sdk_path}"
                    cFlags '-O3', '-DGL_GLEXT_PROTOTYPES', '-DEGL_EGLEXT_PROTOTYPES', '-fsigned-char', "-I${native_sdk_path}", '-Wformat','-mfpu=neon', '-mfloat-abi=softfp -frtti' // full optimization, char data type is signed
                    // 编译优化，设置函式是否能被 inline 的伪指令长度
                    cppFlags '-O3', '-fexceptions', '-fsigned-char',
                            "-frtti -std=c++11", '-Wformat'


                }
            }
        }

        release {

            externalNativeBuild {
                cmake {
                    arguments '-DANDROID_PLATFORM=android-19', '-DANDROID_TOOLCHAIN=clang',
                            '-DANDROID_ARM_NEON=TRUE', '-DANDROID_STL=c++_static',
                            '-DCMAKE_BUILD_TYPE=RelWithDebInfo',
                            "-DPATH_TO_MEDIACORE:STRING=${native_sdk_path}"
                    cFlags '-O3', '-DGL_GLEXT_PROTOTYPES', '-DEGL_EGLEXT_PROTOTYPES', '-fsigned-char', "-I${native_sdk_path}", '-Wformat','-mfpu=neon', '-mfloat-abi=softfp -frtti' // full optimization, char data type is signed
                    // 编译优化，设置函式是否能被 inline 的伪指令长度
                    cppFlags '-O3', '-fexceptions', '-fsigned-char',
                            "-frtti -std=c++11", '-Wformat'

                }
            }
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}

/** 判断是否为Windows操作系统 */
boolean isWindowsOS(){
    boolean isWindowsOS = false;
    String osName = System.getProperty("os.name");
    println("os.name=" + osName);
    if(osName == null || "".equals(osName)) {
        return false;
    }
    if(osName.toLowerCase().indexOf("windows") > -1){
        isWindowsOS = true;
    }
    return isWindowsOS;
}
